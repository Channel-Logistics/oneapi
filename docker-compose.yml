services:
  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # UI
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 30
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: oneapi
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      # pgcrypto (for gen_random_uuid)
      - ./storage/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d oneapi"]
      interval: 5s
      timeout: 5s
      retries: 30
  adminer:
    image: adminer:latest
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports: ["8080:8080"]
  storage:
    build:
      context: .
      dockerfile: storage/Dockerfile
    working_dir: /app
    environment:
      DATABASE_URL: postgresql+psycopg://app:app@postgres:5432/oneapi
      APP_PORT: "9000"
    depends_on:
      postgres:
        condition: service_healthy
    ports: ["9000:9000"]
    command: ["/bin/sh","-c","./scripts/entrypoint.sh"]
  gateway:
    build:
      context: ./gateway
    environment:
      AMQP_URL: ${AMQP_URL:-amqp://user:pass@rabbitmq:5672}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8000:8000"
  aggregator:
    build:
      context: ./aggregator
    env_file:
      - ./.env
    environment:
      AMQP_URL: ${AMQP_URL:-amqp://user:pass@rabbitmq:5672}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  client:
    build:
      context: ./client
    ports:
      - "3000:80"
  notifications:
    build:
      context: ./notifications
    env_file:
      - ./.env
    environment:
      AMQP_URL: ${AMQP_URL:-amqp://user:pass@rabbitmq:5672}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      NOTIFY_EMAIL_FROM: ${NOTIFY_EMAIL_FROM}
      NOTIFY_EMAIL_TO: ${NOTIFY_EMAIL_TO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
volumes:
  pgdata: